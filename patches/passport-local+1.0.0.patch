patch-package
--- a/node_modules/passport-local/lib/strategy.js
+++ b/node_modules/passport-local/lib/strategy.js
@@ -12,10 +12,10 @@
  * The local authentication strategy authenticates requests based on the
  * credentials submitted through an HTML-based login form.
  *
- * Applications must supply a `verify` callback which accepts `username` and
- * `password` credentials, and then calls the `done` callback supplying a
+ * Applications must supply a `verify` callback which accepts `username`, `password`
+ * and `otp` credentials, and then calls the `done` callback supplying a
  * `user`, which should be set to `false` if the credentials are not valid.
- * If an exception occured, `err` should be set.
+ * If an exception occurred, `err` should be set.
  *
  * Optionally, `options` can be used to change the fields in which the
  * credentials are found.
@@ -23,13 +23,14 @@
  * Options:
  *   - `usernameField`  field name where the username is found, defaults to _username_
  *   - `passwordField`  field name where the password is found, defaults to _password_
+ *   - `otpField`      field name where the time-based one-time-password is found, defaults to _otp_
  *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)
  *
  * Examples:
  *
  *     passport.use(new LocalStrategy(
- *       function(username, password, done) {
- *         User.findOne({ username: username, password: password }, function (err, user) {
+ *       function(username, password, otp, done) {
+ *         User.findOne({ username: username, password: password, otp: otp }, function (err, user) {
  *           done(err, user);
  *         });
  *       }
@@ -45,10 +46,11 @@
     options = {};
   }
   if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }
-  
+
   this._usernameField = options.usernameField || 'username';
   this._passwordField = options.passwordField || 'password';
-  
+  this._otpField = options.otpField || 'otp';
+
   passport.Strategy.call(this);
   this.name = 'local';
   this._verify = verify;
@@ -70,24 +72,25 @@
   options = options || {};
   var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);
   var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);
-  
+  var otp = lookup(req.body, this._otpField) || lookup(req.query, this._otpField);
+
   if (!username || !password) {
     return this.fail({ message: options.badRequestMessage || 'Missing credentials' }, 400);
   }
-  
+
   var self = this;
-  
+
   function verified(err, user, info) {
     if (err) { return self.error(err); }
     if (!user) { return self.fail(info); }
     self.success(user, info);
   }
-  
+
   try {
     if (self._passReqToCallback) {
-      this._verify(req, username, password, verified);
+      this._verify(req, username, password, otp, verified);
     } else {
-      this._verify(username, password, verified);
+      this._verify(username, password, otp, verified);
     }
   } catch (ex) {
     return self.error(ex);
